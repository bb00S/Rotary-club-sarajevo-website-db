// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RotaryClub.Data;

#nullable disable

namespace RotaryClub.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RotaryClub.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Honorary")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("RotaryClub.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("RotaryClub.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.ba",
                            PasswordHash = new byte[] { 45, 82, 39, 105, 3, 33, 39, 233, 35, 215, 245, 90, 40, 196, 65, 102, 127, 199, 74, 163, 114, 51, 120, 216, 5, 217, 43, 118, 96, 37, 189, 27, 27, 239, 30, 134, 58, 135, 65, 8, 57, 192, 74, 11, 44, 75, 115, 120, 186, 37, 126, 218, 186, 134, 27, 232, 178, 127, 247, 39, 221, 172, 208, 114 },
                            PasswordSalt = new byte[] { 205, 19, 227, 244, 120, 62, 83, 68, 196, 45, 23, 86, 206, 139, 143, 172, 140, 47, 55, 90, 222, 83, 146, 148, 98, 128, 113, 168, 26, 193, 98, 237, 118, 217, 191, 217, 174, 143, 51, 147, 189, 209, 104, 57, 117, 172, 80, 160, 78, 223, 129, 99, 233, 152, 180, 55, 68, 176, 153, 98, 248, 17, 86, 90, 44, 72, 64, 83, 140, 221, 34, 63, 20, 122, 59, 233, 142, 127, 164, 115, 223, 17, 239, 54, 201, 205, 38, 64, 226, 230, 174, 208, 139, 40, 219, 15, 37, 254, 21, 104, 17, 178, 145, 47, 62, 61, 57, 38, 60, 204, 213, 7, 214, 229, 223, 39, 236, 96, 162, 51, 139, 255, 63, 205, 185, 160, 118, 220 },
                            VerificationToken = "B8B19CEA1A6EBDC9A7C6A95CA37DDEA19AC49F2049098A5DF5EFC87CE2BEA673F80ADC3C7D6E6DC3493770C1697095413DF3524BCA75DEEA3B2C8E65D70D0B78",
                            VerifiedAt = new DateTime(2023, 11, 20, 9, 51, 33, 187, DateTimeKind.Local).AddTicks(3369)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
