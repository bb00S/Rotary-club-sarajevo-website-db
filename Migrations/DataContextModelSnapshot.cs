// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RotaryClub.Data;

#nullable disable

namespace RotaryClub.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RotaryClub.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Honorary")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("RotaryClub.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("RotaryClub.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.ba",
                            PasswordHash = new byte[] { 26, 120, 152, 215, 127, 70, 145, 100, 137, 226, 230, 49, 164, 192, 117, 152, 110, 156, 130, 209, 27, 152, 33, 65, 16, 182, 91, 41, 6, 30, 97, 153, 180, 240, 51, 178, 62, 17, 248, 151, 54, 172, 74, 164, 28, 54, 153, 83, 147, 97, 169, 60, 170, 122, 195, 63, 83, 57, 209, 228, 138, 254, 229, 127 },
                            PasswordSalt = new byte[] { 231, 144, 223, 210, 169, 72, 229, 202, 120, 72, 159, 207, 118, 197, 11, 14, 59, 186, 94, 67, 40, 220, 41, 46, 95, 1, 249, 121, 138, 239, 152, 23, 115, 230, 8, 41, 121, 140, 15, 7, 5, 130, 156, 19, 162, 244, 93, 112, 208, 90, 104, 248, 80, 12, 64, 250, 147, 153, 34, 126, 245, 148, 221, 226, 9, 141, 240, 199, 130, 136, 13, 116, 158, 251, 25, 176, 107, 77, 29, 29, 41, 245, 140, 105, 74, 211, 194, 241, 250, 24, 110, 51, 101, 230, 139, 66, 59, 126, 88, 171, 207, 153, 55, 179, 141, 68, 35, 206, 145, 77, 18, 4, 87, 27, 83, 75, 60, 92, 33, 16, 168, 183, 49, 10, 81, 215, 26, 7 },
                            VerificationToken = "306FAA2768C791830B866C48F10DAD95EF9DB52602B7867199B9ADD0AA717114804AA16AECB5DCB9FDF9E15207B47DCE8CA26761FDEEAACC1217E49DB2E33F86",
                            VerifiedAt = new DateTime(2023, 11, 20, 11, 15, 22, 393, DateTimeKind.Local).AddTicks(5469)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
