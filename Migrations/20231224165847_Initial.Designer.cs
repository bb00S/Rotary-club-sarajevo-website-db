// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RotaryClub.Data;

#nullable disable

namespace RotaryClub.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231224165847_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RotaryClub.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Honorary")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("RotaryClub.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("RotaryClub.Models.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("RotaryClub.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.ba",
                            PasswordHash = new byte[] { 154, 152, 149, 225, 223, 90, 186, 104, 178, 146, 38, 123, 19, 134, 75, 187, 223, 132, 255, 79, 85, 157, 192, 158, 79, 83, 150, 29, 246, 104, 115, 167, 207, 171, 123, 243, 152, 106, 118, 37, 67, 184, 251, 186, 147, 113, 60, 1, 221, 29, 183, 157, 185, 53, 156, 46, 215, 149, 133, 209, 167, 11, 190, 144 },
                            PasswordSalt = new byte[] { 141, 194, 53, 37, 209, 161, 247, 137, 132, 81, 57, 220, 0, 96, 216, 100, 100, 70, 241, 19, 114, 126, 147, 124, 144, 113, 132, 136, 62, 77, 170, 7, 88, 77, 236, 165, 61, 247, 130, 153, 187, 106, 252, 197, 18, 18, 223, 252, 167, 166, 98, 66, 117, 143, 117, 206, 67, 164, 79, 253, 27, 14, 234, 83, 78, 40, 203, 183, 151, 151, 206, 153, 174, 226, 86, 17, 150, 87, 221, 123, 237, 26, 119, 86, 159, 33, 80, 125, 173, 174, 51, 172, 208, 77, 90, 136, 82, 142, 136, 170, 190, 126, 127, 123, 245, 127, 63, 39, 219, 94, 38, 210, 148, 186, 120, 129, 102, 86, 178, 18, 111, 232, 33, 63, 83, 213, 45, 57 },
                            VerificationToken = "287A7C4040D92136082081F35CEEE4EF1CB7D1EAF352FD0D6ACC30AE40D6D2BEAB07C6BD2720B3F570E3F5D2E6F45ABEF7865D2F1185FF0F2471D1465387E1DB",
                            VerifiedAt = new DateTime(2023, 12, 24, 17, 58, 46, 785, DateTimeKind.Local).AddTicks(8578)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
